---
import { CollectionEntry, getCollection } from 'astro:content';
import MainLayout from '~/layouts/MainLayout.astro';
import IntegrationLayout from '~/layouts/IntegrationLayout.astro';
import TutorialLayout from '~/layouts/TutorialLayout.astro';
import MigrationLayout from '~/layouts/MigrationLayout.astro';
import DeployGuideLayout from '~/layouts/DeployGuideLayout.astro';
import CMSLayout from '~/layouts/CMSLayout.astro';
import { splitSlugFromLang } from '~/util';
import languages from '../../i18n/languages';
import { groupPagesByLang } from '../../util/groupPagesByLang';

export async function getStaticPaths() {
	const allPages = await getCollection('docs');

	const routes = allPages.map((page) => {
		const { lang, slug } = splitSlugFromLang(page.slug);
		return {
			params: { lang, slug },
			props: page,
		};
	});

	// Handle fallbacks to english for langs without translations
	const fallbacks = [];
	const pagesByLang = groupPagesByLang(allPages);
	for (const lang of Object.keys(languages)) {
		if (lang === 'en') continue;

		for (const englishPage of pagesByLang.en) {
			const slugWithoutLang = splitSlugFromLang(englishPage.slug).slug;
			const doesNotNeedFallback = pagesByLang[lang]?.some((p) => p.slug.endsWith(slugWithoutLang));
			if (doesNotNeedFallback) continue;
			fallbacks.push({ params: { lang, slug: slugWithoutLang }, props: englishPage });
		}
	}
	return routes.concat(fallbacks);
}

export type Props = CollectionEntry<'docs'>;

const { data, render } = Astro.props;
const { Content, headings } = await render();
---

{
	data.type === 'cms' ? (
		<CMSLayout content={data} headings={headings}>
			<Content />
		</CMSLayout>
	) : data.type === 'integration' ? (
		<IntegrationLayout content={data} headings={headings}>
			<Content />
		</IntegrationLayout>
	) : data.type === 'tutorial' ? (
		<TutorialLayout content={data}>
			<Content />
		</TutorialLayout>
	) : data.type === 'migration' ? (
		<MigrationLayout content={data} headings={headings}>
			<Content />
		</MigrationLayout>
	) : data.type === 'deploy' ? (
		<DeployGuideLayout content={data} headings={headings}>
			<Content />
		</DeployGuideLayout>
	) : (
		<MainLayout content={data} headings={headings}>
			<Content />
		</MainLayout>
	)
}
